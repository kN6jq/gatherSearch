package utils

import (
	"log"
	"os"

	"gopkg.in/yaml.v3"
)

type AutoGenerated struct {
	Module struct {
		Fofa struct {
			URL       string `yaml:"url"`
			Token     string `yaml:"token"`
			All       bool   `yaml:"all"`
			Size      int    `yaml:"size"`
			BatchSize int    `yaml:"batchSize"`
		} `yaml:"fofa"`
		Hunter struct {
			URL       string `yaml:"url"`
			Key       string `yaml:"key"`
			All       bool   `yaml:"all"`
			Size      int    `yaml:"size"`
			BatchSize int    `yaml:"batchSize"`
		} `yaml:"hunter"`
		Shodan struct {
			URL string `yaml:"url"`
			Key string `yaml:"key"`
		} `yaml:"shodan"`
		Zone struct {
			URL  string `yaml:"url"`
			Key  string `yaml:"key"`
			Size int    `yaml:"size"`
		} `yaml:"zone"`
	} `yaml:"module"`
}

var Config *AutoGenerated

func GetConfig() *AutoGenerated {
	// 检查配置文件是否存在
	if _, err := os.Stat("config.yaml"); os.IsNotExist(err) {
		// 如果不存在,生成默认配置文件
		defaultConfig := &AutoGenerated{
			Module: struct {
				Fofa struct {
					URL       string `yaml:"url"`
					Token     string `yaml:"token"`
					All       bool   `yaml:"all"`
					Size      int    `yaml:"size"`
					BatchSize int    `yaml:"batchSize"`
				} `yaml:"fofa"`
				Hunter struct {
					URL       string `yaml:"url"`
					Key       string `yaml:"key"`
					All       bool   `yaml:"all"`
					Size      int    `yaml:"size"`
					BatchSize int    `yaml:"batchSize"`
				} `yaml:"hunter"`
				Shodan struct {
					URL string `yaml:"url"`
					Key string `yaml:"key"`
				} `yaml:"shodan"`
				Zone struct {
					URL  string `yaml:"url"`
					Key  string `yaml:"key"`
					Size int    `yaml:"size"`
				} `yaml:"zone"`
			}{
				Fofa: struct {
					URL       string `yaml:"url"`
					Token     string `yaml:"token"`
					All       bool   `yaml:"all"`
					Size      int    `yaml:"size"`
					BatchSize int    `yaml:"batchSize"`
				}{
					URL:       "https://fofa.info/api/v1/search/all",
					Token:     "",
					All:       true,
					Size:      1000,
					BatchSize: 10,
				},
				Hunter: struct {
					URL       string `yaml:"url"`
					Key       string `yaml:"key"`
					All       bool   `yaml:"all"`
					Size      int    `yaml:"size"`
					BatchSize int    `yaml:"batchSize"`
				}{
					URL:       "https://hunter.qianxin.com/openApi/search",
					Key:       "111111111111111111111111111",
					All:       true,
					Size:      1000,
					BatchSize: 5,
				},
				Shodan: struct {
					URL string `yaml:"url"`
					Key string `yaml:"key"`
				}{
					URL: "https://api.shodan.io/",
					Key: "111111111111111111111111111",
				},
				Zone: struct {
					URL  string `yaml:"url"`
					Key  string `yaml:"key"`
					Size int    `yaml:"size"`
				}{
					URL:  "https://0.zone/api/data/",
					Key:  "111111111111111111111111111",
					Size: 10000,
				},
			},
		}

		// 将默认配置写入文件
		data, err := yaml.Marshal(defaultConfig)
		if err != nil {
			log.Fatal(err)
		}
		err = os.WriteFile("config.yaml", data, 0644)
		if err != nil {
			log.Fatal(err)
		}
		log.Println("生成默认配置文件: config.yaml")
		Config = defaultConfig
	} else {
		// 如果存在,读取配置文件
		file, err := os.ReadFile("config.yaml")
		if err != nil {
			log.Fatal(err)
		}
		err = yaml.Unmarshal(file, &Config)
		if err != nil {
			log.Fatal(err)
		}
	}
	return Config
}
